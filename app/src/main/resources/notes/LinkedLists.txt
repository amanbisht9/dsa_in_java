A LinkedList in Java is a linear data structure where each element, known as a "node,"
holds data and a reference to the next node. Unlike arrays, which have a fixed size, a 
LinkedList is dynamic and can grow or shrink as elements are added or removed. This 
makes it useful when you frequently need to insert or delete elements in the middle of
a list.

Types of Linked Lists
    Singly Linked List: Each node contains data and a link to the next node.
    Doubly Linked List: Each node has a reference to both the next and the previous node,
    allowing bidirectional traversal.


In Java, there isn’t built-in support for specific Singly Linked List or Doubly Linked List 
implementations—only the general-purpose LinkedList class, which is a doubly linked list by 
default. However, you can implement your own custom versions for both singly and doubly 
linked lists by creating Node classes and defining the list operations.

Ways to implement Linked List in Java:
    -> LinkedList<String> list = new LinkedList<>(): Java provides a LinkedList class in the 
    java.util package, which implements both the List and Deque interfaces. This means it 
    can act as a list, a queue, and a double-ended queue.

    -> Singly Linked List Structure
        Node Class: Each Node has a value and a reference to the next node.
        SinglyLinkedList Class: Contains methods to add, remove, and display nodes.

    -> Doubly Linked List Structure
        Node Class: Each Node has data, a reference to the next node, and a reference to the 
        previous node.
        DoublyLinkedList Class: Contains methods to add, remove, and display nodes.

Check out LinkedLists folder!